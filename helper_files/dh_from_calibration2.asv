clear;
clc;

% Import the robot
robot_model = importrobot("./robot_model/kuka-lwr-4plus/model1.urdf"); % Load KUKA LWR 4+
robot_model.DataFormat = 'column';
robot_model.Gravity = [0, 0, -9.80665];

% Compute the direct kinematics
num_joints = 7;
a = sym('a', [1 num_joints]);
alpha = sym('alpha', [1 num_joints]);
d = sym('d', [1 num_joints]);
q = sym('q', [1 num_joints]);
a_cell = sym2cell(a);
alpha_cell = sym2cell(alpha);
d_cell = sym2cell(d);

A0e = eye(4);
for i=1:num_joints
    A0e = A0e * dh_mat_from_table( ...
        a(i), ...
        alpha(i), ...
        d(i), ...
        q(i) ...
    );
end
f = matlabFunction(A0e(1:3, 4));
nabla_a = jacobian(A0e(1:3, 4), a);
nabla_alpha = jacobian(A0e(1:3, 4), alpha);
nabla_d = jacobian(A0e(1:3, 4), d);


% Compute the calibration algorithm
% syms q1 q2 q3 q4 q5 q6 q7 real
% syms q1_v q2_v real
% 
% q_m = [
%     [0,0]; 
%     [sym(pi)/2, 0]; 
%     [sym(pi)/4, -sym(pi)/4]; 
%     [0, sym(pi)/4]
% ];
% p = [  % e.e. pos corresponding to configurations in q_m
%     [2,0]; 
%     [0,2];
%     [1.6925, 0.7425];
%     [1.7218, 0.6718]
% ];
% 
% num_experiments = 4;
% m = size(p, 2); % The number of rows of the direct kinematics
% 
% % Compute l iterations
% phi_n = [1, 1];
% for l = 1:10
%     disp(phi_n)
%     % Compute delta_r_bar and phi_bar
%     delta_r_bar = zeros(num_experiments*m, 1);
%     phi_bar = zeros(num_experiments*m, 2);
%     for i = 1:num_experiments
%         q(q1_v, q2_v) = [phi_n(1)*cos(q1_v) + phi_n(2)*cos(q1_v+q2_v); 
%             phi_n(1)*sin(q1_v) + phi_n(2)*sin(q1_v+q2_v)];
% 
%         q1 = q_m(i, 1);
%         q2 = q_m(i, 2);
%         delta_r_bar((i-1)*m + 1:i*m, 1) = (p(i, 1:2)' - q(q1, q2))';
%         phi_bar((i-1)*m + 1:i*m, 1:2) = [[cos(q1), cos(q1+q2)]; [sin(q1), sin(q1+q2)]];
%     end
% 
%     delta_phi = pinv(phi_bar) * delta_r_bar;
%     phi_n = phi_n + delta_phi';
% end
% disp(phi_n)



%% ============================================================================================================================================
num_cfgs = 10;
m = 3; % The number of rows of the direct kinematics

% Intitialize the test configurations
q_m = zeros(num_cfgs, num_joints);


% Get th
p = zeros(num_cfgs, m);  % e.e. pos corresponding to configurations in q_m
for i=1:num_cfgs
    tf = getTransform(robot_model, q_m(i, 1:num_joints), robot_model.Bodies{8}.Name, robot_model.Bodies{1}.Name);
    p(i, 1:m) = tf(1:3, 4)';
end

num_experiments = 20;
lMax = 10; % Num of iterations

% Compute l iterations
% phi_n = [
%     a1 ... an
%     alpha1 ... alphan
%     d1 ... dn
% ]
phi_n = zeros(3, num_joints);
phi_n_cell = num2cell(phi_n);
for l = 1:lMax
    % Compute delta_r_bar and phi_bar
    delta_r_bar = zeros(num_experiments*m, 1);
    phi_bar = zeros(num_experiments*m*3, num_joints);
    for i = 1:num_experiments
        curr_f(q_cell{1:num_joints}) = f( ...
            phi_n_cell{1, 1:num_joints}, ...
            phi_n_cell{2, 1:num_joints}, ...
            phi_n_cell{3, 1:num_joints}, ...
            q_cell{1:num_joints} ...
        );
    
        curr_cfg = q_m(i, 1:num_joints);
        curr_cfg = num2cell(curr_cfg);
        delta_r_bar((i-1)*m + 1:i*m, 1) = (p(i, 1:m)' - curr_f(curr_cfg{1:num_joints}))';
        phi_bar((i-1)*m + 1:i*m, 1:num_joints) = [nabla_a(); nabla_alpha(); nabla_d()];
    end

    delta_phi = pinv(phi_bar) * delta_r_bar;
    phi_n = phi_n + delta_phi';
    phi_n_cell = num2cell(phi_n);
end
disp(phi_n)